import { addKeyword, addAnswer, utils } from "@builderbot/bot";
import { join } from "path";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MongoAdapter as Database } from "@builderbot/database-mongo";
import { endFlow } from "./end.flow";

const MENU_ITEMS = {
    '1': { name: 'Empanada de Carne', price: 150 },
    '2': { name: 'Empanada de Jam√≥n y Queso', price: 160 },
    '3': { name: 'Empanada de Humita', price: 140 },
    '4': { name: 'Empanada de Verdura', price: 140 },
    '5': { name: 'Empanada de Pollo', price: 150 },
    '6': { name: 'Gaseosa 500ml', price: 250 },
    '7': { name: 'Caf√©', price: 200 },
    '8': { name: 'Cerveza Artesanal 500ml', price: 400 }
};

export const menuFlow = addKeyword<Provider, Database>(utils.setEvent('MENU_FLOW'))
.addAnswer([
    'üåü *Men√∫ Principal* üåü\n\n' +
    '¬°Selecciona lo que deseas pedir respondiendo con el n√∫mero y cantidad!\n' +
    'Por ejemplo: Si deseas 3 Empanadas de Carne, responde con *1 3*.\n\n' +
    'üçΩÔ∏è *Empanadas (unidad):*\n' +
    '1Ô∏è‚É£ ü•© *Empanada de Carne* - $150\n' +
    '2Ô∏è‚É£ üßÄ *Empanada de Jam√≥n y Queso* - $160\n' +
    '3Ô∏è‚É£ ü•î *Empanada de Humita* - $140\n' +
    '4Ô∏è‚É£ üå± *Empanada de Verdura* - $140\n' +
    '5Ô∏è‚É£ üçó *Empanada de Pollo* - $150\n\n' +
    'ü•§ *Bebidas:*\n' +
    '6Ô∏è‚É£ ü•§ *Gaseosa 500ml* - $250\n' +
    '7Ô∏è‚É£ ‚òï *Caf√©* - $200\n' +
    '8Ô∏è‚É£ üç∫ *Cerveza Artesanal 500ml* - $400\n\n' +
    'üí° *Instrucciones:*\n' +
    '- Responde con el n√∫mero del producto seguido de la cantidad\n' +
    '- Ejemplo: "1 12" para pedir 12 empanadas de carne\n'
], {capture: true}, async (ctx, { state, flowDynamic, fallBack }) => {
    // Validaci√≥n del formato de entrada
    const input = ctx.body.trim();
    const inputParts = input.split(' ');
    
    if (inputParts.length !== 2) {
        return fallBack('‚ùå Formato inv√°lido. Por favor, ingresa el n√∫mero del producto seguido de la cantidad (ejemplo: "1 3")');
    }

    const [selection, quantityStr] = inputParts;
    const quantity = parseInt(quantityStr);

    // Validaci√≥n del n√∫mero de producto
    if (!MENU_ITEMS[selection]) {
        return fallBack('‚ùå Producto no v√°lido. Por favor, selecciona un n√∫mero del 1 al 8');
    }

    // Validaci√≥n de la cantidad
    if (isNaN(quantity) || quantity <= 0 || quantity > 100) {
        return fallBack('‚ùå Cantidad inv√°lida. Por favor, ingresa un n√∫mero entre 1 y 50');
    }

    // Obtenemos el array actual de orders y si no existe lo inicializamos
    let currentOrders = state.get('orders');
    if (!currentOrders) {
        currentOrders = [];
    }
    
    const newOrder = {
        item: MENU_ITEMS[selection].name,
        quantity: quantity,
        price: MENU_ITEMS[selection].price
    };
    
    // Agregamos el nuevo pedido
    currentOrders.push(newOrder);
    
    // Actualizamos el estado
    await state.update({ orders: currentOrders });
    
}).addAction(async (_, { flowDynamic, state }) => {
    const orders = state.get('orders') || [];
    const lastOrder = orders[orders.length - 1];
    await flowDynamic(`‚úÖ Agregado al pedido: ${lastOrder.item} x ${lastOrder.quantity}`);
})
.addAnswer(['¬øDeseas seguir pidiendo? Ingresa "Si" o "No"'], {capture: true}, async (ctx, { gotoFlow, state, flowDynamic, fallBack }) => {
    const response = ctx.body.trim().toLowerCase();
    
    // Validaci√≥n de la respuesta Si/No
    if (!['si', 'no'].includes(response)) {
        return fallBack('‚ùå Por favor, responde solo con "Si" o "No"');
    }

    if (response === 'si') {
        return gotoFlow(menuFlow);
    } else {
        const orders = state.get('orders') || [];
        
        // Validaci√≥n de que haya al menos un pedido
        if (orders.length === 0) {
            return fallBack('‚ùå No has realizado ning√∫n pedido. Por favor, selecciona al menos un producto.');
        }
        
        let orderSummary = '*Resumen de tu pedido:*\n\n';
        let total = 0;
        
        orders.forEach((order, index) => {
            orderSummary += `${index + 1}. ${order.item} x ${order.quantity} = $${order.price * order.quantity}\n`;
            total += order.price * order.quantity;
        });
        
        orderSummary += `\n*Total a pagar: $${total}*`;
        
        await flowDynamic(orderSummary);
        return gotoFlow(endFlow);
    }
});